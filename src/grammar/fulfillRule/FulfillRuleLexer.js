// Generated from FulfillRule.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,18,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,
12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,4,16,136,8,16,11,16,12,16,137,
1,17,4,17,141,8,17,11,17,12,17,142,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,
11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
1,0,2,3,0,46,57,65,90,97,122,2,0,9,10,32,32,147,0,1,1,0,0,0,0,3,1,0,0,0,
0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,
3,39,1,0,0,0,5,46,1,0,0,0,7,48,1,0,0,0,9,50,1,0,0,0,11,61,1,0,0,0,13,75,
1,0,0,0,15,83,1,0,0,0,17,88,1,0,0,0,19,94,1,0,0,0,21,100,1,0,0,0,23,105,
1,0,0,0,25,109,1,0,0,0,27,114,1,0,0,0,29,120,1,0,0,0,31,131,1,0,0,0,33,135,
1,0,0,0,35,140,1,0,0,0,37,38,5,58,0,0,38,2,1,0,0,0,39,40,5,114,0,0,40,41,
5,117,0,0,41,42,5,108,0,0,42,43,5,101,0,0,43,44,5,115,0,0,44,45,5,58,0,0,
45,4,1,0,0,0,46,47,5,40,0,0,47,6,1,0,0,0,48,49,5,41,0,0,49,8,1,0,0,0,50,
51,5,100,0,0,51,52,5,101,0,0,52,53,5,102,0,0,53,54,5,105,0,0,54,55,5,110,
0,0,55,56,5,105,0,0,56,57,5,116,0,0,57,58,5,105,0,0,58,59,5,111,0,0,59,60,
5,110,0,0,60,10,1,0,0,0,61,62,5,100,0,0,62,63,5,101,0,0,63,64,5,102,0,0,
64,65,5,105,0,0,65,66,5,110,0,0,66,67,5,105,0,0,67,68,5,116,0,0,68,69,5,
105,0,0,69,70,5,111,0,0,70,71,5,110,0,0,71,72,5,95,0,0,72,73,5,105,0,0,73,
74,5,100,0,0,74,12,1,0,0,0,75,76,5,100,0,0,76,77,5,101,0,0,77,78,5,102,0,
0,78,79,5,97,0,0,79,80,5,117,0,0,80,81,5,108,0,0,81,82,5,116,0,0,82,14,1,
0,0,0,83,84,5,65,0,0,84,85,5,78,0,0,85,86,5,89,0,0,86,87,5,32,0,0,87,16,
1,0,0,0,88,89,5,84,0,0,89,90,5,65,0,0,90,91,5,83,0,0,91,92,5,75,0,0,92,93,
5,32,0,0,93,18,1,0,0,0,94,95,5,70,0,0,95,96,5,82,0,0,96,97,5,79,0,0,97,98,
5,77,0,0,98,99,5,32,0,0,99,20,1,0,0,0,100,101,5,32,0,0,101,102,5,84,0,0,
102,103,5,79,0,0,103,104,5,32,0,0,104,22,1,0,0,0,105,106,5,73,0,0,106,107,
5,83,0,0,107,108,5,32,0,0,108,24,1,0,0,0,109,110,5,32,0,0,110,111,5,79,0,
0,111,112,5,82,0,0,112,113,5,32,0,0,113,26,1,0,0,0,114,115,5,32,0,0,115,
116,5,65,0,0,116,117,5,78,0,0,117,118,5,68,0,0,118,119,5,32,0,0,119,28,1,
0,0,0,120,121,5,70,0,0,121,122,5,85,0,0,122,123,5,76,0,0,123,124,5,70,0,
0,124,125,5,73,0,0,125,126,5,76,0,0,126,127,5,76,0,0,127,128,5,69,0,0,128,
129,5,68,0,0,129,130,5,32,0,0,130,30,1,0,0,0,131,132,5,66,0,0,132,133,5,
89,0,0,133,32,1,0,0,0,134,136,7,0,0,0,135,134,1,0,0,0,136,137,1,0,0,0,137,
135,1,0,0,0,137,138,1,0,0,0,138,34,1,0,0,0,139,141,7,1,0,0,140,139,1,0,0,
0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,
6,17,0,0,145,36,1,0,0,0,3,0,137,142,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class FulfillRuleLexer extends antlr4.Lexer {

    static grammarFileName = "FulfillRule.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "':'", "'rules:'", "'('", "')'", "'definition'", 
                         "'definition_id'", "'default'", "'ANY '", "'TASK '", 
                         "'FROM '", "' TO '", "'IS '", "' OR '", "' AND '", 
                         "'FULFILLED '", "'BY'" ];
	static symbolicNames = [ null, null, null, null, null, "DEFINITION_TOKEN", 
                          "DEFINITION_ID_TOKEN", "DEFAULT", "ANY", "TASK_TOKEN", 
                          "FROM", "TO", "IS", "OR", "AND", "FULFILLED", 
                          "BY", "TEXT", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "DEFINITION_TOKEN", 
                      "DEFINITION_ID_TOKEN", "DEFAULT", "ANY", "TASK_TOKEN", 
                      "FROM", "TO", "IS", "OR", "AND", "FULFILLED", "BY", 
                      "TEXT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

FulfillRuleLexer.EOF = antlr4.Token.EOF;
FulfillRuleLexer.T__0 = 1;
FulfillRuleLexer.T__1 = 2;
FulfillRuleLexer.T__2 = 3;
FulfillRuleLexer.T__3 = 4;
FulfillRuleLexer.DEFINITION_TOKEN = 5;
FulfillRuleLexer.DEFINITION_ID_TOKEN = 6;
FulfillRuleLexer.DEFAULT = 7;
FulfillRuleLexer.ANY = 8;
FulfillRuleLexer.TASK_TOKEN = 9;
FulfillRuleLexer.FROM = 10;
FulfillRuleLexer.TO = 11;
FulfillRuleLexer.IS = 12;
FulfillRuleLexer.OR = 13;
FulfillRuleLexer.AND = 14;
FulfillRuleLexer.FULFILLED = 15;
FulfillRuleLexer.BY = 16;
FulfillRuleLexer.TEXT = 17;
FulfillRuleLexer.WS = 18;



